}
}
# Function which log transforms a vector after adding 1 (for cases when x = 0)
plus_1_log <- function(x){
return(log(x+1))
}
# Function which takes in a string and appends "_log", for renaming of transformed variables.
rename_log <- function(x){
return(paste0(x,"_log"))
}
# Function for one-by-one GLM with a vector of covariates of interest. Can also add a variable for adjustment.
one_cov_glm <- function(data, covariates, outcome_var, outcome_text, adjustment_var = NULL,
plot = T, family = "binomial"){
out_models = list() # Model output
out_plots = list() # Plot output
for(col in covariates){ # Loops through all covariates of interest, one at a time.
# Generalized linear model of outcome ~ covariate, with option of an adjustment variable.
out_models[[col]] <- summary(glm(eval(parse(text=paste0(outcome_var," ~ `",col,"`",
ifelse(is.null(adjustment_var),
"",
paste0(" + `",adjustment_var,"`"))))),
data = data, family = family))
# If the user wants to plot (`plot` == T).
# Does not include adjustment variable in plotting, if present.
if(plot){
# Create a temporary data frame for plotting
tmp <- select(data,outcome_var,col) %>%
filter_at(vars(contains(outcome_var)), all_vars(!is.na(.))) %>% # Remove missing outcomes.
as.data.frame %>%
mutate_at(vars(contains(outcome_var)),
all_vars(factor(.,levels = c(0,1), labels = c("No","Yes")))) # Factor outcome
if(is.numeric(tmp[,col]) &
length(unique(tmp[,col][!is.na(tmp[,col])])) > 2){ # Continuous Numeric
# Create boxplot.
out_plots[[col]] <- ggplot(tmp, aes_string(x = outcome_var,y = col)) +
geom_boxplot(aes_string(group = outcome_var)) +
labs(x = outcome_text, y = col, title = paste0(outcome_text," by ",col),
subtitle = paste0("t-Test p = ",
signif(t.test(eval(parse(text=paste0("`",col,"` ~ `",outcome_var,"`"))),
data = tmp)$p.value,2), # t-test p-value in subtitle
"; Wilcoxon Test p = ",
signif(wilcox.test(eval(parse(text=paste0("`",col,"` ~ `",outcome_var,"`"))),
data = tmp)$p.value,2))) + # Wilcoxon (non-parametric) p-value in subtitle
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = rel(1.1)),
legend.position = "none")
}
else { # categorical
# Add `col` and `outcome_var` columns, to accomodate limitations of geom_mosaic/ggmosaic `product` function.
tmp <- mutate_at(tmp, vars(contains(col)), all_vars(factor(.))) %>%
mutate_(col = col, outcome_var = outcome_var)
if(all(levels(tmp$col) == c("0","1"))) levels(tmp$col) = c("No","Yes")
out_plots[[col]] <- ggplot(data = tmp) +
geom_mosaic(aes(x = product(col,outcome_var), # Create mosaic plot
fill = outcome_var), na.rm=TRUE) + # Color by outcome
labs(x = outcome_text, y = col, title=paste0(outcome_text," by ",col),
subtitle = paste0("Fisher's Exact Test p = ",
signif(fisher.test(table(tmp[,c(outcome_var,col)]))$p.value,2))) + # Fisher's Exact p-value in subtitle
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = rel(1.1)),
legend.position = "none") +
scale_fill_discrete(outcome_text)
}
}
}
# Return list of models and plots (if desired) as a list.
return(list(models = out_models, plots = out_plots))
}
# Output unadjusted regression in nice table format. Requires a list of regression models.
output_regression_list <- function(reg_list, colnames = F){
# If user chooses to output column names.
if(colnames) cat("Variable\tCategory\tEstimate\tOR\tStd. Error\tz value\tPr(>|z|)\n")
# Loops over all names in the list of regression models
for(n in names(reg_list)){
model = reg_list[[n]] # Pull model.
# Create coefficient table.
coef = model$coefficients[-1, , drop = F]
rownames(coef) = gsub(n,"",rownames(coef))
OR = exp(coef[,1])
coef = cbind(coef[,1, drop = F],OR = OR,coef[,2:4, drop = F])
cat(paste0(n,"\t"))
# Allows for categorical output with > 1 entry in coefficient table.
if(nrow(coef) == 1){
cat(paste0("\t",paste0(signif(coef,4),collapse = "\t"),"\n"))
} else{
for(i in 1:nrow(coef)){
cat(paste0(ifelse(i > 1, "\t",""),rownames(coef)[i],"\t",paste0(signif(coef[i,],4),collapse = "\t"),"\n"))
}
}
}
}
# Output adjusted regression in nice table format. Requires a list of regression models, and then a string of the adjustment variable name.
output_adjusted_regression_list <- function(reg_list, adj_var, colnames = F){
# If user chooses to output column names. Puts adjustment variable to the right of main variable coefficient.
if(colnames) cat(paste0("Variable\tCategory\tEstimate\tOR\tStd. Error\tz value\tPr(>|z|)\t",adj_var," Estimate\t",adj_var," OR\t",adj_var," Std. Error\t",adj_var," z value\t",adj_var," Pr(>|z|)\n"))
# Loops over all names in the list of regression models
for(n in names(reg_list)){
model = reg_list[[n]] # Pull model.
# Create coefficient table and adjusted coefficient table, separately.
coef = model$coefficients[-1, , drop = F]
coef_adj = coef[adj_var,, drop = F]
coef = coef[!rownames(coef) %in% adj_var,, drop = F]
rownames(coef) = gsub(n,"",rownames(coef))
OR = exp(coef[,1])
coef = cbind(coef[,1, drop = F],OR = OR,coef[,2:4, drop = F])
OR_adj = exp(coef_adj[,1])
coef_adj = cbind(coef_adj[,1, drop = F],OR = OR_adj,coef_adj[,2:4, drop = F])
cat(paste0(n,"\t"))
# Allows for categorical output with > 1 entry in coefficient table.
if(nrow(coef) == 1){
cat(paste0("\t",paste0(signif(coef,4),collapse = "\t"),"\t",paste0(signif(coef_adj,4),collapse = "\t"),"\n"))
} else{
for(i in 1:nrow(coef)){
cat(paste0(ifelse(i > 1, "\t",""),rownames(coef)[i],"\t",paste0(signif(coef[i,],4),collapse = "\t"),
"\t",paste0(ifelse(rep(i == 1,5),signif(coef_adj[i,],4),rep("-",5)),collapse = "\t"),"\n"))
}
}
}
}
# Important clinical covariates, in the order we ultimately want them reported.
Demographic_vars = c('AGE_AT_CDIFF', 'AGE_AT_CDIFF_log', 'GENDER', 'WHITE', 'distance_km_100', 'distance_km_GT100') #'ETHNICITY',
Comorbidity_vars = c('history_status', 'elixhauser', 'elixhauser_log', 'charlson', 'charlson_log', 'ALCOHOL_ABUSE', 'BLOOD_LOSS_ANEMIA', 'CARD_ARRHYTH', 'CHF', 'COAGULOPATHY', 'CVA', 'DEFICIENCY_ANEMIA', 'DEMENTIA', 'DEPRESSION', 'DM', 'DRUG_ABUSE', 'FLUID_LYTES', 'HT', 'HYPOTHYROID', 'LYMPHOMA', 'METS', 'MI', 'NEUROLOGIC', 'OBESITY', 'PARALYSIS', 'PSYCHOSES', 'PUD', 'PULM', 'PULM_CIRC', 'PVD', 'RENAL_DZ', 'RHEUM', 'RHEUMATOID', 'SOLID_TUMOR', 'VALV_DZ', 'WEIGHT_LOSS', 'LIVER', 'IBD', 'Crohns', 'UC') #'IBD_555_ENC_NM', 'IBD_555_ENC_NM_log', 'IBD_556_ENC_NM', 'IBD_556_ENC_NM_log',
Vitals_vars = c('IDSA_severe', 'LAB48_WBC_PEAK', 'LAB48_WBC_PEAK_log', 'WBC_PEAK_GTE15', 'CREAT_PEAK_GTE15', 'LAB48_CREAT_PEAK', 'LAB48_CREAT_PEAK_log', 'ALBUMIN_LOW_LT25', 'ALBUMIN_LOW_LT3', 'LAB48_ALB_LOW', 'LAB48_ALB_LOW_log')
Medication_vars = c('H_abx_exposed', 'L_abx_exposed', 'M_abx_exposed', 'PROBIOTIC_exposed', 'PPI_exposed', 'H2RB_exposed')
clin_vars = c(Demographic_vars,Comorbidity_vars,Vitals_vars,Medication_vars)
# Modify the filepath to your directory with relevant files. Files needed:
## Clinical_Covariates_with_Toxin_and_Recurrence.csv
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG2.csv"))
# Important clinical covariates, in the order we ultimately want them reported.
Demographic_vars = c('AGE_AT_CDIFF', 'AGE_AT_CDIFF_log', 'GENDER', 'WHITE', 'distance_km_100', 'distance_km_GT100') #'ETHNICITY',
Comorbidity_vars = c('history_status', 'elixhauser', 'elixhauser_log', 'charlson', 'charlson_log', 'ALCOHOL_ABUSE', 'BLOOD_LOSS_ANEMIA', 'CARD_ARRHYTH', 'CHF', 'COAGULOPATHY', 'CVA', 'DEFICIENCY_ANEMIA', 'DEMENTIA', 'DEPRESSION', 'DM', 'DRUG_ABUSE', 'FLUID_LYTES', 'HT', 'HYPOTHYROID', 'LYMPHOMA', 'METS', 'MI', 'NEUROLOGIC', 'OBESITY', 'PARALYSIS', 'PSYCHOSES', 'PUD', 'PULM', 'PULM_CIRC', 'PVD', 'RENAL_DZ', 'RHEUM', 'RHEUMATOID', 'SOLID_TUMOR', 'VALV_DZ', 'WEIGHT_LOSS', 'LIVER', 'IBD', 'Crohns', 'UC') #'IBD_555_ENC_NM', 'IBD_555_ENC_NM_log', 'IBD_556_ENC_NM', 'IBD_556_ENC_NM_log',
Vitals_vars = c('IDSA_severe', 'LAB48_WBC_PEAK', 'LAB48_WBC_PEAK_log', 'WBC_PEAK_GTE15', 'CREAT_PEAK_GTE15', 'LAB48_CREAT_PEAK', 'LAB48_CREAT_PEAK_log', 'ALBUMIN_LOW_LT25', 'ALBUMIN_LOW_LT3', 'LAB48_ALB_LOW', 'LAB48_ALB_LOW_log')
Medication_vars = c('H_abx_exposed', 'L_abx_exposed', 'M_abx_exposed', 'PROBIOTIC_exposed', 'PPI_exposed', 'H2RB_exposed')
clin_vars = c(Demographic_vars,Comorbidity_vars,Vitals_vars,Medication_vars)
# Modify the filepath to your directory with relevant files. Files needed:
## Clinical_Covariates_with_Toxin_and_Recurrence.csv
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG.csv"))
## Create data subset with log-transformed numeric covariates.
data_subset_log <- data_subset %>%
select(SAMPLE_ID,grep("_log",clin_vars,value = T, invert = T)) %>%
group_by(SAMPLE_ID) %>%
mutate_if(should_be_factor, as.character) %>% # got weird warnings when using factor or as.factor
mutate_if(is.numeric, plus_1_log) %>%
select_if(is.numeric, rename_log) %>%
full_join(select(data_subset,SAMPLE_ID,recurrence_status_recur,recurrence_status_live,A_binary,B_binary,grep("_log",clin_vars,value = T, invert = T)))
recur_clin <- one_cov_glm(data_subset_log,clin_vars,"recurrence_status_recur","Recurrence Status (All)")
signifClin <- lapply(recur_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(recur_clin$models)[.]
recur_clin$models[signifClin]
plots <- marrangeGrob(recur_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("recur_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("recur_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(recur_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(recur_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(recur_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(recur_clin$models[Medication_vars], colnames = T)
sink()
recur_clin_live <- one_cov_glm(data_subset_log,clin_vars,"recurrence_status_live","Recurrence Status (Live)")
signifClin <- lapply(recur_clin_live$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(recur_clin_live$models)[.]
recur_clin_live$models[signifClin]
plots <- marrangeGrob(recur_clin_live$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("recur_clin_plot_live_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("recur_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_regression_list(recur_clin_live$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(recur_clin_live$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(recur_clin_live$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(recur_clin_live$models[Medication_vars], colnames = T)
sink()
toxinA_clin <- one_cov_glm(data_subset_log,clin_vars,"A_binary","Antitoxin A Present")
signifClin <- lapply(toxinA_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(toxinA_clin$models)[.]
toxinA_clin$models[signifClin]
plots <- marrangeGrob(toxinA_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("toxinA_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("toxinA_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(toxinA_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(toxinA_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(toxinA_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(toxinA_clin$models[Medication_vars], colnames = T)
sink()
toxinB_clin <- one_cov_glm(data_subset_log,clin_vars,"B_binary","Antitoxin B Present")
signifClin <- lapply(toxinB_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(toxinB_clin$models)[.]
toxinB_clin$models[signifClin]
plots <- marrangeGrob(toxinB_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("toxinB_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("toxinB_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(toxinB_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(toxinB_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(toxinB_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(toxinB_clin$models[Medication_vars], colnames = T)
sink()
recur_toxinA_clin = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_recur", "Recurrence Status (All)", adjustment_var = "A_binary", plot = F)
recur_toxinB_clin = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_recur", "Recurrence Status (All)", adjustment_var = "B_binary", plot = F)
recur_toxinA_clin_live = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_live", "Recurrence Status (Live)", adjustment_var = "A_binary", plot = F)
recur_toxinB_clin_live = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_live", "Recurrence Status (Live)", adjustment_var = "B_binary", plot = F)
sink("recur_toxinA_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Demographic_vars], adj_var = "A_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Comorbidity_vars], adj_var = "A_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Vitals_vars], adj_var = "A_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Medication_vars], adj_var = "A_binary", colnames = T)
sink()
sink("recur_toxinB_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Demographic_vars], adj_var = "B_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Comorbidity_vars], adj_var = "B_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Vitals_vars], adj_var = "B_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Medication_vars], adj_var = "B_binary", colnames = T)
sink()
sink("recur_toxinA_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Demographic_vars], adj_var = "A_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Comorbidity_vars], adj_var = "A_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Vitals_vars], adj_var = "A_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Medication_vars], adj_var = "A_binary", colnames = T)
sink()
sink("recur_toxinB_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Demographic_vars],
adj_var = "B_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Comorbidity_vars],
adj_var = "B_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Vitals_vars],
adj_var = "B_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Medication_vars],
adj_var = "B_binary", colnames = T)
sink()
abin <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary, family = 'binomial')
summary(abin)
bbin <- glm(data=data_subset, formula = recurrence_status_recur ~ B_binary, family = 'binomial')
summary(bbin)
test_one <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_one)
test_meet <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + distance_km_GT100 + history_status, family = 'binomial')
summary(test_meet)
test_meet2 <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + distance_km_GT100 + history_status + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_meet2)
test_live <- glm(data=data_subset, formula = recurrence_status_live ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_live)
data_close <- subset(data_subset, data_subset$distance_km_GT100 == 0)
data_far <- subset(data_subset, data_subset$distance_km_GT100 == 1)
test_close <- glm(data=data_close, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_close)
test_far <- glm(data=data_far, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_far)
table(data_subset$recurrence_status_recur)
table(data_subset$recurrence_status_live)
library(ggplot2)
setwd("C:/Users/julie/Documents/SI699/SI699_Bachelorette")
senti <- read.csv("ette14_twitterfeatures.csv")
View(senti)
library(reshape2)
# melt variables into long form
senti_long <- melt(senti)
View(senti_long)
ggplot(data=senti_long, aes(x=Name, y=value, group=variable)) +
geom_line() +
geom_point()
ggplot(data=senti_long, aes(x=variable, y=value, group=Name)) +
geom_line() +
geom_point()
ggplot(data=senti_long, aes(x=variable, y=value, group=Name)) +
geom_line() +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#split variable column
senti_long <- separate(data = senti_long, col = variable, into = c("week", "sentiment"), sep = "\\.")
library(tidyr)
#split variable column
senti_long <- separate(data = senti_long, col = variable, into = c("week", "sentiment"), sep = "\\.")
library(dplyr)
to_chart <- filter(senti_long, sentiment == "Total" | sentiment == "Positive")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line() +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line() +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11"))
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name)) +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11"))
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11"))
to_chart <- filter(senti_long, sentiment == "Total")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11"))
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
to_chart$win <- ifelse(to_chart$Name == "Garrett", 1, 0)
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name, linetype=win)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=Name, linetype=win)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win)) +
geom_point(aes(color=Name)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win)) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Total")
to_chart <- filter(senti_long, sentiment == "Positive")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Positive")
to_chart <- filter(senti_long, sentiment == "Negative")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Negative")
to_chart <- filter(senti_long, sentiment == "Neutral")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Neutral")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Neutral") +
ylim(0, 600)
to_chart <- filter(senti_long, sentiment == "Negative")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Negative") +
ylim(0, 600)
to_chart <- filter(senti_long, sentiment == "Positive")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Positive") +
ylim(0, 600)
View(senti)
senti$x2.PosPercent <- senti$X2.Positive / senti$X2.Total
senti$x2.PosPercent <- senti$X2.Positive / senti$X2.Total
senti$x2.NegPercent <- senti$X2.Negative / senti$X2.Total
senti$x2.NeuPercent <- senti$X2.Neutral / senti$X2.Total
senti$x3.PosPercent <- senti$X3.Positive / senti$X3.Total
senti$x3.NegPercent <- senti$X3.Negative / senti$X3.Total
senti$x3.NeuPercent <- senti$X3.Neutral / senti$X3.Total
senti$x4.PosPercent <- senti$X4.Positive / senti$X4.Total
senti$x4.NegPercent <- senti$X4.Negative / senti$X4.Total
senti$x4.NeuPercent <- senti$X4.Neutral / senti$X4.Total
senti$x5.PosPercent <- senti$X5.Positive / senti$X5.Total
senti$x5.NegPercent <- senti$X5.Negative / senti$X5.Total
senti$x5.NeuPercent <- senti$X5.Neutral / senti$X5.Total
senti$x6.PosPercent <- senti$X6.Positive / senti$X6.Total
senti$x6.NegPercent <- senti$X6.Negative / senti$X6.Total
senti$x6.NeuPercent <- senti$X6.Neutral / senti$X6.Total
senti$x7.PosPercent <- senti$X7.Positive / senti$X7.Total
senti$x7.NegPercent <- senti$X7.Negative / senti$X7.Total
senti$x7.NeuPercent <- senti$X7.Neutral / senti$X7.Total
senti$x8.PosPercent <- senti$X8.Positive / senti$X8.Total
senti$x8.NegPercent <- senti$X8.Negative / senti$X8.Total
senti$x8.NeuPercent <- senti$X8.Neutral / senti$X8.Total
senti$x9.PosPercent <- senti$X9.Positive / senti$X9.Total
senti$x9.NegPercent <- senti$X9.Negative / senti$X9.Total
senti$x9.NeuPercent <- senti$X9.Neutral / senti$X9.Total
senti$x10.PosPercent <- senti$X10.Positive / senti$X10.Total
senti$x10.NegPercent <- senti$X10.Negative / senti$X10.Total
senti$x10.NeuPercent <- senti$X10.Neutral / senti$X10.Total
senti$x11.PosPercent <- senti$X11.Positive / senti$X11.Total
senti$x11.NegPercent <- senti$X11.Negative / senti$X11.Total
senti$x11.NeuPercent <- senti$X11.Neutral / senti$X11.Total
# melt variables into long form
senti_long <- melt(senti)
#split variable column
senti_long <- separate(data = senti_long, col = variable, into = c("week", "sentiment"), sep = "\\.")
to_chart <- filter(senti_long, sentiment == "PosPercent")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11")) +
ggtitle("Positive Percentage")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11")) +
ggtitle("Positive Percentage")
to_chart <- filter(senti_long, sentiment == "NegPercent")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11")) +
ggtitle("Negative Percentage")
to_chart <- filter(senti_long, sentiment == "NeuPercent")
to_chart$win <- ifelse(to_chart$Name == "Garrett", "1", "0")
ggplot(data=to_chart, aes(x=week, y=value, group=Name)) +
geom_line(aes(color=win), size=1.2) +
geom_point(aes(color=win)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(limits=c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11")) +
ggtitle("Neutral Percentage")
