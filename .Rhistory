PHARM_CLASS %in% c("ABSORBABLE SULFONAMIDE ANTIBACTERIAL AGENTS",
"OXAZOLIDINONES",
"ANTILEPROTICS",
"NITROFURAN DERIVATIVES ANTIBACTERIAL AGENTS") ~ 1,
grepl("Rifamycin", PHARM_SUBCLASS) ~ 1,
TRUE ~ 0), # Low Risk Antibiotic
M_abx = case_when(PHARM_CLASS %in% c("AMINOGLYCOSIDES","PENICILLINS") ~ 1,
PHARM_CLASS == "VANCOMYCIN AND DERIVATIVES" & (ADMIN_ROUTE %in% c("Intrathecal", "Intravenous")) ~ 1,
TRUE ~ 0)) %>% # Medium Risk Antibiotic
group_by(SAMPLE_ID) %>%
mutate(H_abx_exposed = ifelse(any(H_abx == 1, na.rm = T),1,0), # If exposed to H/M/L risk antibiotic
L_abx_exposed = ifelse(any(L_abx == 1, na.rm = T),1,0),
M_abx_exposed = ifelse(any(M_abx == 1, na.rm = T),1,0),
any_abx = ifelse(any(THERA_CLASS == "ANTIBIOTICS"),1,0), # If exposed to any antibiotic (non-topical, since we already took those out)
PROBIOTIC_exposed = ifelse(any(PROBIOTIC_YN == 1, na.rm = T),1,0),
PPI_exposed = ifelse(any(PPI_YN == 1, na.rm = T),1,0),
H2RB_exposed = ifelse(any(H2RB_YN == 1,na.rm = T),1,0))
meds_filter <- meds %>%
select(SAMPLE_ID,ends_with("_exposed"),any_abx) %>% # Only include columns of interest
dplyr::distinct()
## Check on any antibiotics that weren't classified as H/M/L, as a sanity check.
# meds %>% filter(L_abx_exposed==0 & M_abx_exposed==0 & H_abx_exposed==0 & THERA_CLASS=="ANTIBIOTICS") %>% as.data.frame() %>% select(GENERIC_NAME,MED_NAME,THERA_CLASS,PHARM_CLASS,PHARM_SUBCLASS,ADMIN_ROUTE) %>% distinct() %>% arrange(MED_NAME) %>% write_tsv(.,"unclassified_abx.tsv")
# Combine summary data, comorbidities, social data, medications data.
other_cov <- full_join(summary_data, comorbidity) %>%
mutate(HOSP_ADMIT_DTM = as.POSIXct(HOSP_ADMIT_DTM, format = "%m-%d-%Y %H:%M")) %>%
full_join(social_mod) %>%
full_join(meds_filter)
# Add all other covariates to the ELISA unit data.
all_data <- right_join(other_cov, eu_data, by = c("SAMPLE_ID" = "ids")) %>%
group_by(SAMPLE_ID) %>%
mutate(charlson = sum(case_when(AGE_AT_CDIFF >= 50 & AGE_AT_CDIFF < 60 ~ 1,
AGE_AT_CDIFF >= 60 & AGE_AT_CDIFF < 70 ~ 2,
AGE_AT_CDIFF >= 70 & AGE_AT_CDIFF < 80 ~ 3,
AGE_AT_CDIFF >= 80 ~ 4,
TRUE ~ 0), # Age
DM_UNCOMP,DM_COMP, # Diabetes Mellitus
MILD_LIVER, MOD_SEV_LIVER, # Liver Disease
MALIG, METS, # Malignancy
AIDS, # AIDS
RENAL_DZ, # CKD
CHF, # Chronic Heart Failure
MI, # Myocardial Infarction
PULM, # COPD
PVD, # Peripheral Vascular Disease
CVA, # CVA or TIA
DEMENTIA, # Dementia
HEMIPLEGIA, # Hemiplegia
RHEUM, # Connective Tissue Disease
PUD, # Peptic Ulcer Disease
na.rm = T), # Create Charlson Comorbidity Index.
elixhauser = sum(CHF, CARD_ARRHYTH, VALV_DZ, PULM_CIRC, PVD, HT_UNCOMP, HT_COMP, PARALYSIS,
NEUROLOGIC, PULM, DM_UNCOMP, DM_COMP, HYPOTHYROID, RENAL_DZ, LIVER_DZ, PUD,
AIDS, LYMPHOMA, METS, SOLID_TUMOR, RHEUMATOID, COAGULOPATHY, OBESITY,
WEIGHT_LOSS, FLUID_LYTES, BLOOD_LOSS_ANEMIA, DEFICIENCY_ANEMIA, ALCOHOL_ABUSE,
DRUG_ABUSE, PSYCHOSES, DEPRESSION,na.rm = T)) # Create Elixhauser Comorbidity Index
data_subset <- all_data %>%
mutate(recurrence_status_recur = ifelse(recurrence_status == "RECURRED", 1, ifelse(recurrence_status == "DEATH" & recurrence_time <= 14,NA_integer_,0)), # Create recurrence status outcome, removing patients who died before 14 days.
recurrence_status_live = ifelse(recurrence_status == "RECURRED", 1, ifelse(recurrence_status == "DEATH",NA_integer_,0)), # Create recurrence status outcome, removing all patients who died.
death = ifelse(recurrence_status == "DEATH",1,0), # Whether they died.
history_status = ifelse(history_status == "PREVIOUS HISTORY", 1, 0), # Whether they had history of CDI
A_binary = ifelse(AeuFF >= 1000, 1, 0), # A toxin threshold.
B_binary = ifelse(BeuFF >= 1000, 1, 0), # B toxin threshold.
LAB48_WBC_PEAK = as.numeric(LAB48_WBC_PEAK),
IDSA_severe = ifelse(is.na(LAB48_WBC_PEAK) & # IDSA severity.
(is.na(BASELINE_CREAT_VALUE) | is.na(LAB48_CREAT_PEAK)),NA,
ifelse(!is.na(LAB48_WBC_PEAK) & LAB48_WBC_PEAK > 15, 1,
ifelse(!is.na(LAB48_CREAT_PEAK > BASELINE_CREAT_VALUE*1.5) &
LAB48_CREAT_PEAK > BASELINE_CREAT_VALUE*1.5, 1, 0))),
IBD = ifelse(IBD_555_ENC_NM > 0 | IBD_556_ENC_NM > 0, 1, 0),
Crohns = ifelse(IBD_555_ENC_NM > 0, 1, 0),
UC = ifelse(IBD_556_ENC_NM > 0, 1, 0)) %>%
select(SAMPLE_ID, recurrence_status, recurrence_status_recur, recurrence_status_live, history_status,
AeuFF, A_binary, BeuFF, B_binary,
CDIFF_SAMPLE_DATE, HOSP_ADMIT_DTM,
STATE_OF_RESIDENCE, ZIP_CODE, AGE_AT_CDIFF, GENDER, RACE, ETHNICITY,  # Demographics
elixhauser, charlson, AIDS, ALCOHOL_ABUSE, BLOOD_LOSS_ANEMIA, CARD_ARRHYTH, CHF, COAGULOPATHY, CVA,
DEFICIENCY_ANEMIA, DEMENTIA, DEPRESSION, DM_COMP, DM_UNCOMP, DRUG_ABUSE, FLUID_LYTES, HEMIPLEGIA,
HT_COMP, HT_UNCOMP, HYPOTHYROID, LIVER_DZ, LYMPHOMA, MALIG, METS, MI, MILD_LIVER, MOD_SEV_LIVER,
NEUROLOGIC, OBESITY, PARALYSIS, PSYCHOSES, PUD, PULM, PULM_CIRC, PVD, RENAL_DZ, RHEUM, RHEUMATOID,
SOLID_TUMOR, VALV_DZ, WEIGHT_LOSS, # Elixhauser, Charlson, and components
IDSA_severe, LAB48_WBC_PEAK, LAB48_CREAT_PEAK, LAB48_ALB_LOW, # IDSA severe, components, albumin (LOW)
IBD, IBD_555_ENC_NM, Crohns, IBD_556_ENC_NM, UC, # IBD status (IBD_555_ENC_NM: Count of encounters with an associated diagnosis of Crohn's Disease (555.x); IBD_556_ENC_NM: Count of encounters with an associated diagnosis of Ulcerative Colitis (556.x))
ends_with("_exposed")) %>% # Medications
select(-one_of(colnames(.)[apply(is.na(.), MARGIN = 2, FUN = all) | apply(., MARGIN = 2, FUN = function(x){return(length(unique(x[!is.na(x)])) == 1)})] )) # removes `AIDS` as all NA; removes `HEMIPLEGIA`, `MALIG`, `MOD_SEV_LIVER` as having no variation
# Create some additional variables, as suggested by Krishna.
data_subset <- data_subset %>%
group_by(SAMPLE_ID) %>%
mutate(WHITE = ifelse(RACE == "WHITE OR CAUCASIAN", "WHITE",
ifelse(RACE == "UNKNOWN" | is.na(RACE), NA, "NON-WHITE")), # Instead of multi-category race, look at White vs. Other.
HT = ifelse(1 %in% c(HT_COMP,HT_UNCOMP), 1, ifelse(all(is.na(c(HT_COMP,HT_UNCOMP))), NA, 0)), # Any type of hypertension.
DM = ifelse(1 %in% c(DM_COMP,DM_UNCOMP), 1, ifelse(all(is.na(c(DM_COMP,DM_UNCOMP))), NA, 0)), # Any type of diabetes.
LIVER = ifelse(1 %in% c(LIVER_DZ,MILD_LIVER), 1, ifelse(all(is.na(c(LIVER_DZ,MILD_LIVER))), NA, 0)), # Any type of liver disease.
WBC_PEAK_GTE15 = ifelse(LAB48_WBC_PEAK >= 15, 1, 0), # H/L WBC
CREAT_PEAK_GTE15 = ifelse(LAB48_CREAT_PEAK >= 1.5, 1, 0), # H/L Creatinine
ALBUMIN_LOW_LT25 = ifelse(LAB48_ALB_LOW < 2.5, 1, 0), # H/L Albumin (2.5 cutoff)
ALBUMIN_LOW_LT3 = ifelse(LAB48_ALB_LOW < 3, 1, 0)) %>% # H/L Albumin (3 cutoff)
#ZIP_DISTANCE_KM = distance_from_hosp(substr(ZIP_CODE,1,5))$distance_km) %>% #greatest circle distance
select(-RACE, -HT_COMP, -HT_UNCOMP, -DM_COMP, -DM_UNCOMP, -LIVER_DZ, -MILD_LIVER)
## DISTANCE STUFF
data_subset$ZIP_CODE5 <- substr(data_subset$ZIP_CODE, 1, 5) # need to select only the first 5 digits of each zip code
distance <- distance_from_hosp(substr(data_subset$ZIP_CODE5,1,5)) %>% select(zip, distance_km) # make a new table with distances for each zip code
#distance <- distance %>% select(zip, distance_km)
# merge distance with data_subset, keeping only distance_km
data_subset <- merge(data_subset, distance, by.x = 'ZIP_CODE5', by.y = 'zip', sort = FALSE)
data_subset$distance_km_100 <- data_subset$distance_km / 100
data_subset$distance_km_GT100 <- ifelse(data_subset$distance_km >= 100, 1, 0)
# Look at full structure of the data, make sure nothing needs to be modified.
# Will write to current directory.
# sink("str_data_subset.txt")
# str(data_subset,list.len = ncol(data_subset))
# sink()
write_csv(data_subset,paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG.csv"))
View(data_subset)
View(data_subset)
library(tidyverse)
library(ggmosaic)
library(gridExtra)
# Function which checks whether a numeric variable should be a factor or not, i.e. if it has 2 or fewer unique values or is a character vector
should_be_factor <- function(x){
if(all(is.numeric(x))){
return(length(unique(x[!is.na(x)])) <= 2)
} else{
return(all(is.character(x)))
}
}
# Function which log transforms a vector after adding 1 (for cases when x = 0)
plus_1_log <- function(x){
return(log(x+1))
}
# Function which takes in a string and appends "_log", for renaming of transformed variables.
rename_log <- function(x){
return(paste0(x,"_log"))
}
# Function for one-by-one GLM with a vector of covariates of interest. Can also add a variable for adjustment.
one_cov_glm <- function(data, covariates, outcome_var, outcome_text, adjustment_var = NULL,
plot = T, family = "binomial"){
out_models = list() # Model output
out_plots = list() # Plot output
for(col in covariates){ # Loops through all covariates of interest, one at a time.
# Generalized linear model of outcome ~ covariate, with option of an adjustment variable.
out_models[[col]] <- summary(glm(eval(parse(text=paste0(outcome_var," ~ `",col,"`",
ifelse(is.null(adjustment_var),
"",
paste0(" + `",adjustment_var,"`"))))),
data = data, family = family))
# If the user wants to plot (`plot` == T).
# Does not include adjustment variable in plotting, if present.
if(plot){
# Create a temporary data frame for plotting
tmp <- select(data,outcome_var,col) %>%
filter_at(vars(contains(outcome_var)), all_vars(!is.na(.))) %>% # Remove missing outcomes.
as.data.frame %>%
mutate_at(vars(contains(outcome_var)),
all_vars(factor(.,levels = c(0,1), labels = c("No","Yes")))) # Factor outcome
if(is.numeric(tmp[,col]) &
length(unique(tmp[,col][!is.na(tmp[,col])])) > 2){ # Continuous Numeric
# Create boxplot.
out_plots[[col]] <- ggplot(tmp, aes_string(x = outcome_var,y = col)) +
geom_boxplot(aes_string(group = outcome_var)) +
labs(x = outcome_text, y = col, title = paste0(outcome_text," by ",col),
subtitle = paste0("t-Test p = ",
signif(t.test(eval(parse(text=paste0("`",col,"` ~ `",outcome_var,"`"))),
data = tmp)$p.value,2), # t-test p-value in subtitle
"; Wilcoxon Test p = ",
signif(wilcox.test(eval(parse(text=paste0("`",col,"` ~ `",outcome_var,"`"))),
data = tmp)$p.value,2))) + # Wilcoxon (non-parametric) p-value in subtitle
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = rel(1.1)),
legend.position = "none")
}
else { # categorical
# Add `col` and `outcome_var` columns, to accomodate limitations of geom_mosaic/ggmosaic `product` function.
tmp <- mutate_at(tmp, vars(contains(col)), all_vars(factor(.))) %>%
mutate_(col = col, outcome_var = outcome_var)
if(all(levels(tmp$col) == c("0","1"))) levels(tmp$col) = c("No","Yes")
out_plots[[col]] <- ggplot(data = tmp) +
geom_mosaic(aes(x = product(col,outcome_var), # Create mosaic plot
fill = outcome_var), na.rm=TRUE) + # Color by outcome
labs(x = outcome_text, y = col, title=paste0(outcome_text," by ",col),
subtitle = paste0("Fisher's Exact Test p = ",
signif(fisher.test(table(tmp[,c(outcome_var,col)]))$p.value,2))) + # Fisher's Exact p-value in subtitle
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = rel(1.1)),
legend.position = "none") +
scale_fill_discrete(outcome_text)
}
}
}
# Return list of models and plots (if desired) as a list.
return(list(models = out_models, plots = out_plots))
}
# Output unadjusted regression in nice table format. Requires a list of regression models.
output_regression_list <- function(reg_list, colnames = F){
# If user chooses to output column names.
if(colnames) cat("Variable\tCategory\tEstimate\tOR\tStd. Error\tz value\tPr(>|z|)\n")
# Loops over all names in the list of regression models
for(n in names(reg_list)){
model = reg_list[[n]] # Pull model.
# Create coefficient table.
coef = model$coefficients[-1, , drop = F]
rownames(coef) = gsub(n,"",rownames(coef))
OR = exp(coef[,1])
coef = cbind(coef[,1, drop = F],OR = OR,coef[,2:4, drop = F])
cat(paste0(n,"\t"))
# Allows for categorical output with > 1 entry in coefficient table.
if(nrow(coef) == 1){
cat(paste0("\t",paste0(signif(coef,4),collapse = "\t"),"\n"))
} else{
for(i in 1:nrow(coef)){
cat(paste0(ifelse(i > 1, "\t",""),rownames(coef)[i],"\t",paste0(signif(coef[i,],4),collapse = "\t"),"\n"))
}
}
}
}
# Output adjusted regression in nice table format. Requires a list of regression models, and then a string of the adjustment variable name.
output_adjusted_regression_list <- function(reg_list, adj_var, colnames = F){
# If user chooses to output column names. Puts adjustment variable to the right of main variable coefficient.
if(colnames) cat(paste0("Variable\tCategory\tEstimate\tOR\tStd. Error\tz value\tPr(>|z|)\t",adj_var," Estimate\t",adj_var," OR\t",adj_var," Std. Error\t",adj_var," z value\t",adj_var," Pr(>|z|)\n"))
# Loops over all names in the list of regression models
for(n in names(reg_list)){
model = reg_list[[n]] # Pull model.
# Create coefficient table and adjusted coefficient table, separately.
coef = model$coefficients[-1, , drop = F]
coef_adj = coef[adj_var,, drop = F]
coef = coef[!rownames(coef) %in% adj_var,, drop = F]
rownames(coef) = gsub(n,"",rownames(coef))
OR = exp(coef[,1])
coef = cbind(coef[,1, drop = F],OR = OR,coef[,2:4, drop = F])
OR_adj = exp(coef_adj[,1])
coef_adj = cbind(coef_adj[,1, drop = F],OR = OR_adj,coef_adj[,2:4, drop = F])
cat(paste0(n,"\t"))
# Allows for categorical output with > 1 entry in coefficient table.
if(nrow(coef) == 1){
cat(paste0("\t",paste0(signif(coef,4),collapse = "\t"),"\t",paste0(signif(coef_adj,4),collapse = "\t"),"\n"))
} else{
for(i in 1:nrow(coef)){
cat(paste0(ifelse(i > 1, "\t",""),rownames(coef)[i],"\t",paste0(signif(coef[i,],4),collapse = "\t"),
"\t",paste0(ifelse(rep(i == 1,5),signif(coef_adj[i,],4),rep("-",5)),collapse = "\t"),"\n"))
}
}
}
}
# Important clinical covariates, in the order we ultimately want them reported.
Demographic_vars = c('AGE_AT_CDIFF', 'AGE_AT_CDIFF_log', 'GENDER', 'WHITE', 'distance_km_100', 'distance_km_GT100') #'ETHNICITY',
Comorbidity_vars = c('history_status', 'elixhauser', 'elixhauser_log', 'charlson', 'charlson_log', 'ALCOHOL_ABUSE', 'BLOOD_LOSS_ANEMIA', 'CARD_ARRHYTH', 'CHF', 'COAGULOPATHY', 'CVA', 'DEFICIENCY_ANEMIA', 'DEMENTIA', 'DEPRESSION', 'DM', 'DRUG_ABUSE', 'FLUID_LYTES', 'HT', 'HYPOTHYROID', 'LYMPHOMA', 'METS', 'MI', 'NEUROLOGIC', 'OBESITY', 'PARALYSIS', 'PSYCHOSES', 'PUD', 'PULM', 'PULM_CIRC', 'PVD', 'RENAL_DZ', 'RHEUM', 'RHEUMATOID', 'SOLID_TUMOR', 'VALV_DZ', 'WEIGHT_LOSS', 'LIVER', 'IBD', 'Crohns', 'UC') #'IBD_555_ENC_NM', 'IBD_555_ENC_NM_log', 'IBD_556_ENC_NM', 'IBD_556_ENC_NM_log',
Vitals_vars = c('IDSA_severe', 'LAB48_WBC_PEAK', 'LAB48_WBC_PEAK_log', 'WBC_PEAK_GTE15', 'CREAT_PEAK_GTE15', 'LAB48_CREAT_PEAK', 'LAB48_CREAT_PEAK_log', 'ALBUMIN_LOW_LT25', 'ALBUMIN_LOW_LT3', 'LAB48_ALB_LOW', 'LAB48_ALB_LOW_log')
Medication_vars = c('H_abx_exposed', 'L_abx_exposed', 'M_abx_exposed', 'PROBIOTIC_exposed', 'PPI_exposed', 'H2RB_exposed')
clin_vars = c(Demographic_vars,Comorbidity_vars,Vitals_vars,Medication_vars)
# Modify the filepath to your directory with relevant files. Files needed:
## Clinical_Covariates_with_Toxin_and_Recurrence.csv
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG2.csv"))
# Important clinical covariates, in the order we ultimately want them reported.
Demographic_vars = c('AGE_AT_CDIFF', 'AGE_AT_CDIFF_log', 'GENDER', 'WHITE', 'distance_km_100', 'distance_km_GT100') #'ETHNICITY',
Comorbidity_vars = c('history_status', 'elixhauser', 'elixhauser_log', 'charlson', 'charlson_log', 'ALCOHOL_ABUSE', 'BLOOD_LOSS_ANEMIA', 'CARD_ARRHYTH', 'CHF', 'COAGULOPATHY', 'CVA', 'DEFICIENCY_ANEMIA', 'DEMENTIA', 'DEPRESSION', 'DM', 'DRUG_ABUSE', 'FLUID_LYTES', 'HT', 'HYPOTHYROID', 'LYMPHOMA', 'METS', 'MI', 'NEUROLOGIC', 'OBESITY', 'PARALYSIS', 'PSYCHOSES', 'PUD', 'PULM', 'PULM_CIRC', 'PVD', 'RENAL_DZ', 'RHEUM', 'RHEUMATOID', 'SOLID_TUMOR', 'VALV_DZ', 'WEIGHT_LOSS', 'LIVER', 'IBD', 'Crohns', 'UC') #'IBD_555_ENC_NM', 'IBD_555_ENC_NM_log', 'IBD_556_ENC_NM', 'IBD_556_ENC_NM_log',
Vitals_vars = c('IDSA_severe', 'LAB48_WBC_PEAK', 'LAB48_WBC_PEAK_log', 'WBC_PEAK_GTE15', 'CREAT_PEAK_GTE15', 'LAB48_CREAT_PEAK', 'LAB48_CREAT_PEAK_log', 'ALBUMIN_LOW_LT25', 'ALBUMIN_LOW_LT3', 'LAB48_ALB_LOW', 'LAB48_ALB_LOW_log')
Medication_vars = c('H_abx_exposed', 'L_abx_exposed', 'M_abx_exposed', 'PROBIOTIC_exposed', 'PPI_exposed', 'H2RB_exposed')
clin_vars = c(Demographic_vars,Comorbidity_vars,Vitals_vars,Medication_vars)
# Modify the filepath to your directory with relevant files. Files needed:
## Clinical_Covariates_with_Toxin_and_Recurrence.csv
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG.csv"))
## Create data subset with log-transformed numeric covariates.
data_subset_log <- data_subset %>%
select(SAMPLE_ID,grep("_log",clin_vars,value = T, invert = T)) %>%
group_by(SAMPLE_ID) %>%
mutate_if(should_be_factor, as.character) %>% # got weird warnings when using factor or as.factor
mutate_if(is.numeric, plus_1_log) %>%
select_if(is.numeric, rename_log) %>%
full_join(select(data_subset,SAMPLE_ID,recurrence_status_recur,recurrence_status_live,A_binary,B_binary,grep("_log",clin_vars,value = T, invert = T)))
recur_clin <- one_cov_glm(data_subset_log,clin_vars,"recurrence_status_recur","Recurrence Status (All)")
signifClin <- lapply(recur_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(recur_clin$models)[.]
recur_clin$models[signifClin]
plots <- marrangeGrob(recur_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("recur_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("recur_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(recur_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(recur_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(recur_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(recur_clin$models[Medication_vars], colnames = T)
sink()
recur_clin_live <- one_cov_glm(data_subset_log,clin_vars,"recurrence_status_live","Recurrence Status (Live)")
signifClin <- lapply(recur_clin_live$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(recur_clin_live$models)[.]
recur_clin_live$models[signifClin]
plots <- marrangeGrob(recur_clin_live$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("recur_clin_plot_live_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("recur_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_regression_list(recur_clin_live$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(recur_clin_live$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(recur_clin_live$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(recur_clin_live$models[Medication_vars], colnames = T)
sink()
toxinA_clin <- one_cov_glm(data_subset_log,clin_vars,"A_binary","Antitoxin A Present")
signifClin <- lapply(toxinA_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(toxinA_clin$models)[.]
toxinA_clin$models[signifClin]
plots <- marrangeGrob(toxinA_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("toxinA_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("toxinA_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(toxinA_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(toxinA_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(toxinA_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(toxinA_clin$models[Medication_vars], colnames = T)
sink()
toxinB_clin <- one_cov_glm(data_subset_log,clin_vars,"B_binary","Antitoxin B Present")
signifClin <- lapply(toxinB_clin$models, FUN = getElement, name = "coefficients") %>%
lapply(FUN = as.data.frame) %>%
lapply(FUN = getElement, name = "Pr(>|z|)") %>%
lapply(FUN = `[`, i = -1) %>%
lapply(FUN = `<`, y = 0.05) %>%
lapply(FUN = any) %>%
unlist %>%
names(toxinB_clin$models)[.]
toxinB_clin$models[signifClin]
plots <- marrangeGrob(toxinB_clin$plots, ncol = 3, nrow = 2, layout_matrix = matrix(seq_len(3 * 2), nrow = 2, ncol = 3, byrow = T))
ggsave("toxinB_clin_plot_JG2.pdf",plots,device = "pdf",units = "in", width = 22.5, height = 15)
plots
sink("toxinB_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_regression_list(toxinB_clin$models[Demographic_vars], colnames = T)
cat("Comorbidities\n")
output_regression_list(toxinB_clin$models[Comorbidity_vars], colnames = T)
cat("Vitals and Severity\n")
output_regression_list(toxinB_clin$models[Vitals_vars], colnames = T)
cat("Medication Exposure\n")
output_regression_list(toxinB_clin$models[Medication_vars], colnames = T)
sink()
recur_toxinA_clin = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_recur", "Recurrence Status (All)", adjustment_var = "A_binary", plot = F)
recur_toxinB_clin = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_recur", "Recurrence Status (All)", adjustment_var = "B_binary", plot = F)
recur_toxinA_clin_live = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_live", "Recurrence Status (Live)", adjustment_var = "A_binary", plot = F)
recur_toxinB_clin_live = one_cov_glm(data_subset_log, clin_vars,"recurrence_status_live", "Recurrence Status (Live)", adjustment_var = "B_binary", plot = F)
sink("recur_toxinA_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Demographic_vars], adj_var = "A_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Comorbidity_vars], adj_var = "A_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Vitals_vars], adj_var = "A_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinA_clin$models[Medication_vars], adj_var = "A_binary", colnames = T)
sink()
sink("recur_toxinB_clin_assoc_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Demographic_vars], adj_var = "B_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Comorbidity_vars], adj_var = "B_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Vitals_vars], adj_var = "B_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinB_clin$models[Medication_vars], adj_var = "B_binary", colnames = T)
sink()
sink("recur_toxinA_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Demographic_vars], adj_var = "A_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Comorbidity_vars], adj_var = "A_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Vitals_vars], adj_var = "A_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinA_clin_live$models[Medication_vars], adj_var = "A_binary", colnames = T)
sink()
sink("recur_toxinB_clin_assoc_live_JG2.tsv")
cat("Demographics\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Demographic_vars],
adj_var = "B_binary", colnames = T)
cat("Comorbidities\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Comorbidity_vars],
adj_var = "B_binary", colnames = T)
cat("Vitals and Severity\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Vitals_vars],
adj_var = "B_binary", colnames = T)
cat("Medication Exposure\n")
output_adjusted_regression_list(recur_toxinB_clin_live$models[Medication_vars],
adj_var = "B_binary", colnames = T)
sink()
abin <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary, family = 'binomial')
summary(abin)
bbin <- glm(data=data_subset, formula = recurrence_status_recur ~ B_binary, family = 'binomial')
summary(bbin)
test_one <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_one)
test_meet <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + distance_km_GT100 + history_status, family = 'binomial')
summary(test_meet)
test_meet2 <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + distance_km_GT100 + history_status + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_meet2)
test_live <- glm(data=data_subset, formula = recurrence_status_live ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_live)
data_close <- subset(data_subset, data_subset$distance_km_GT100 == 0)
data_far <- subset(data_subset, data_subset$distance_km_GT100 == 1)
test_close <- glm(data=data_close, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_close)
test_far <- glm(data=data_far, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3, family = 'binomial')
summary(test_far)
table(data_subset$recurrence_status_recur)
table(data_subset$recurrence_status_live)
# Load in libraries
library(tidyverse)
# Load in data files
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG.csv"))
min(data_subset$HOSP_ADMIT_DTM)
max(data_subset$HOSP_ADMIT_DTM)
# Load in libraries
library(tidyverse)
# Load in data files
filepath = "C:/Users/julie/Documents/565EU_Work/"
data_subset <- read_csv(paste0(filepath, "Clinical_Covariates_with_Toxin_and_Recurrence_JG.csv"))
# Function which checks whether a numeric variable should be a factor or not, i.e. if it has 2 or fewer unique values or is a character vector
should_be_factor <- function(x){
if(all(is.numeric(x))){
return(length(unique(x[!is.na(x)])) <= 2)
} else{
return(all(is.character(x)))
}
}
# Function which log transforms a vector after adding 1 (for cases when x = 0)
plus_1_log <- function(x){
return(log(x+1))
}
# Function which takes in a string and appends "_log", for renaming of transformed variables.
rename_log <- function(x){
return(paste0(x,"_log"))
}
# Important clinical covariates, in the order we ultimately want them reported.
Demographic_vars = c('AGE_AT_CDIFF', 'AGE_AT_CDIFF_log', 'GENDER', 'WHITE', 'distance_km_100', 'distance_km_GT100') #'ETHNICITY',
Comorbidity_vars = c('history_status', 'elixhauser', 'elixhauser_log', 'charlson', 'charlson_log', 'ALCOHOL_ABUSE', 'BLOOD_LOSS_ANEMIA', 'CARD_ARRHYTH', 'CHF', 'COAGULOPATHY', 'CVA', 'DEFICIENCY_ANEMIA', 'DEMENTIA', 'DEPRESSION', 'DM', 'DRUG_ABUSE', 'FLUID_LYTES', 'HT', 'HYPOTHYROID', 'LYMPHOMA', 'METS', 'MI', 'NEUROLOGIC', 'OBESITY', 'PARALYSIS', 'PSYCHOSES', 'PUD', 'PULM', 'PULM_CIRC', 'PVD', 'RENAL_DZ', 'RHEUM', 'RHEUMATOID', 'SOLID_TUMOR', 'VALV_DZ', 'WEIGHT_LOSS', 'LIVER', 'IBD', 'Crohns', 'UC') #'IBD_555_ENC_NM', 'IBD_555_ENC_NM_log', 'IBD_556_ENC_NM', 'IBD_556_ENC_NM_log',
Vitals_vars = c('IDSA_severe', 'LAB48_WBC_PEAK', 'LAB48_WBC_PEAK_log', 'WBC_PEAK_GTE15', 'CREAT_PEAK_GTE15', 'LAB48_CREAT_PEAK', 'LAB48_CREAT_PEAK_log', 'ALBUMIN_LOW_LT25', 'ALBUMIN_LOW_LT3', 'LAB48_ALB_LOW', 'LAB48_ALB_LOW_log')
Medication_vars = c('H_abx_exposed', 'L_abx_exposed', 'M_abx_exposed', 'PROBIOTIC_exposed', 'PPI_exposed', 'H2RB_exposed')
clin_vars = c(Demographic_vars,Comorbidity_vars,Vitals_vars,Medication_vars)
#### get log dataset ####
## Create data subset with log-transformed numeric covariates.
data_subset_log <- data_subset %>%
select(SAMPLE_ID,grep("_log",clin_vars,value = T, invert = T)) %>%
group_by(SAMPLE_ID) %>%
mutate_if(should_be_factor, as.character) %>% # got weird warnings when using factor or as.factor
mutate_if(is.numeric, plus_1_log) %>%
select_if(is.numeric, rename_log) %>%
full_join(select(data_subset,SAMPLE_ID,recurrence_status_recur,recurrence_status_live,A_binary,B_binary,grep("_log",clin_vars,value = T, invert = T)))
force_dist <- glm(data=data_subset, formula = recurrence_status_recur ~ A_binary + UC + ALBUMIN_LOW_LT3 + distance_km_GT100, family = 'binomial')
summary(force_dist)
table(data_subset$recurrence_status)
table(data_subset$recurrence_status_recur)
table(data_subset$recurrence_status_recur, useNA = 'always')
table(data_subset$recurrence_status, useNA = 'always')
p <- ggplot(data_subset, aes(x=recurrence_status, y=AeuFF, fill=recurrence_status)) +
geom_violin(trim=FALSE)
p + ylab("Anti-Toxin A ELISA Units") +
xlab("Recurrence Status") + ylim(0, 15000) + geom_boxplot(width=0.1) +
scale_fill_brewer(palette="Oranges") + theme_classic()
k <- ggplot(data_subset, aes(x=recurrence_status, y=BeuFF, fill=recurrence_status)) +
geom_violin(trim=FALSE)
k + ylab("Anti-Toxin B ELISA Units") +
xlab("Recurrence Status") + ylim(0, 15000) + geom_boxplot(width=0.1) +
scale_fill_brewer(palette="Blues") + theme_classic()
p <- ggplot(data_subset, aes(x=recurrence_status, y=AeuFF, fill=recurrence_status)) +
geom_violin(trim=FALSE)
p + ylab("Anti-Toxin A ELISA Units") +
xlab("Recurrence Status") + ylim(0, 15000) + geom_boxplot(width=0.1) +
scale_fill_brewer(palette="Oranges") + theme_classic()
setwd("C:/Users/julie/Documents/SI699/SI699_Bachelorette")
roses <- read.csv('Roses.csv')
library(ggplot2)
p <-ggplot(roses, aes(SEASON, R))
p +geom_bar(stat = "identity", aes(fill = WINNER), position = "dodge")
roses$WINNER <- as.factor(roses$WINNER)
p <-ggplot(roses, aes(SEASON, R))
p +geom_bar(stat = "identity", aes(fill = WINNER), position = "dodge")
View(roses)
roses$R <- as.factor(roses$R)
p <-ggplot(roses, aes(SEASON, R))
p +geom_bar(stat = "identity", aes(fill = WINNER), position = "dodge")
setwd("C:/Users/julie/Documents/SI699/SI699_Bachelorette")
roses <- read.csv('Roses.csv')
library(ggplot2)
roses$WINNER <- as.factor(roses$WINNER)
p <-ggplot(roses, aes(SEASON, value))
p +geom_bar(stat = "identity", aes(fill = WINNER), position = "dodge")
